---
title: "Lab 3"
author: "Conie O'Malley"
date: "`r Sys.Date()`"
format: 
  pdf: 
    titlepage: true
    toc: true
    toc-depth: 2
    code-block-wrap: true
    number-sections: true
execute:
  echo: true
  freeze: false
  error: false
editor: source
python:
  version: /Users/coniecakes/anaconda3/envs/datascience/bin/python
---

```{r}
packages <- c("rvest", "tm.plugin.mail", "Rcrawler", "RSelenium", "RedditExtractoR", "bskyr", "rtoot")
for (i in packages) {
    renv::install(i)
}
```

# Part 1: Importing Data Using the tm Package

## Deliverable 1: Review File Types

```{r}
tm::getReaders() # obtain available readers from tm package
```

Word: "readDOC"
PDF: "readPDF"
Plaintext: "readPlain"
HTML: "readHTML"
Email: "readMail"

## Deliverable 2: Getting and Setting a Working Directory
```{r}
getwd() # get working directory
```

## Deliverable 3: Importing Tab Delimited Files: Prepare Trump Impeachment Object
```{r}
trump1 <- read.delim("Lab 3/data/impeach.tab", stringsAsFactors = FALSE) # read tab delimited file
str(trump1) # structure of the data frame

trump2 <- read.delim("/Users/coniecakes/Library/CloudStorage/OneDrive-Personal/001. Documents - Main/023. Programming Tools/R Studio/AdvTxtAnalytics/Lab 3/data/impeach.tab", stringsAsFactors = FALSE) # read using absolute path
str(trump2)

trump3 <- readr::read_tsv("Lab 3/data/impeach.tab") # import using read_tsv
str(trump3)

class(trump1)
class(trump2)
class(trump3)
```

### Deliverable 4: Import and Inspect a Folder of .txt files Using TM: IGF Bali Transcripts
```{r}
igfbali <- tm::Corpus(tm::DirSource("Lab 3/data/txt_data"), # read igfbali data into corpus vector
                      readerControl=list(reader=tm::readPlain))
tm::inspect(igfbali[1]) # inspect igfbali
class(igfbali) -> igfbali_class # identify the class of igfbali
```

We use readPlain in order to read the plain text data files from the `txt_data` into a corpus.


`igfbali` is a `r igfbali_class` object.

## Part 2: Regular Expressions (REGEX)

### Deliverable 5: Create Objects Containing a Vector of Characters and Explore using Regex
```{r}
animals <- c("jaguar", "jay", "bat") # create a list vector

stringr::str_detect(animals, "j") # check if any element in the vector contains the character "j"
```

The function identified any element that contained the letter "j" and returned a boolean.

```{r}
stringr::str_extract(animals, "j") # extract all instances of the character "j" from each element

stringr::str_locate(animals, "j") # locate position of first instance of "j" in each element
```

The function tells us the location of the first instance of "j" in each element.

```{r}
stringr::str_detect(animals, "jag") # check if any element contains the string "jag"
```

```{r}
wows <- c("wow", "WoW", "WOW") # assign list vector

stringr::str_detect(wows, "WOW") # check if any elementcontains the string "WOW"
```

### Deliverable 6: Understanding and Using the Regex Meta Characters

```{r}
math <- c("1=2", "14+5", "3-5") # assign list vector
#stringr::str_detect(math, "+") # produces an error
stringr::str_detect(math, "\\+") # check if any element contains the "+" character
```

```{r}
strings <- c("cat", "cut", "cue") # assign list vector
stringr::str_extract(strings, "c.") # detect letter c and next character
stringr::str_extract(strings, "c.t") # detect letter c, any number of characters, then t
```

```{r}
strings2 <- c("a", "b", "c") # assign list vector
stringr::str_detect(strings2, "[ac]") # identify anything with a or c
```

```{r}
numbers <- c("1","2","3","4","5","6","7","8","9") # assign list vector
stringr::str_detect(numbers, "[2-7]") # identify numbers between 2 and 7
```

```{r}
sentence <- "This is a long sentence with 2 numbers with 1 digits." # assign string vector
stringr::str_locate_all(sentence, "[1-2a-b]") # locate any numbers from 1-2 and letter from a-b
```

This output means that there is a character from our search criteria `1-2a-b` at the positions listed in the sentence. `Start` and `End` signify the starting position of the located character and the ending position respectively. So `Start - 9` and `End - 9` means there is a character from our search criteria at the 9th index of the sentence.

```{r}
col <- c("colour", "color", "farver") # assign list vector
stringr::str_detect(col, "colou?r") # check if any element contains the string "colour" or "color"
```

```{r}
sentences <- c("The year was 1776.", "Alexander Hamilton died at 47.") # assign string vector
stringr::str_extract(sentences, "\\d{4}") # extract all instances of a four-digit number 
```

### Deliverable 7: Understanding and Using the Regex Anchors

```{r}
seasons <- c("The summer is hot this year","The spring is a lovely time", # assign string vector
"Winter is my favorite time of the year","Fall is a time of peace") 
stringr::str_detect(seasons, "^The") # check if any element starts with "The"
stringr::str_extract(seasons, "^The") # extract all instances that start with "The"
stringr::str_detect(seasons, "year$") # check if any element ends with "year"
```

```{r}
folder_names <- c("analysis","data-raw","data","R") # assing string vector
stringr::str_detect(folder_names, "^data$") # check if any element is exactly "data"
```

## Part 3: Web Scraping

### Deliverable 8: Reading html files into R and Manipulating with readr

```{r}
weatherlink <- "https://forecast.weather.gov/MapClick.php?lat=38.95604000000003&lon=-77.11782999999997#.XFozMs9KjUI"
weatherlink <- rvest::read_html(weatherlink) # read html file into R

forecasthtml <- rvest::html_nodes(weatherlink, 
                "detailed-forecast-body b, .forecast-text") # select nodes with class "forecast-text" and "b"
forecasttext <- rvest::html_text(forecasthtml)
forecasttext
```

```{r}
paste(forecasttext, collapse = " ") # combine all text into one string
```

### Deliverable 9: Webscraping with Given CSS Fields

```{r}
starwars <- rvest::read_html("https://rvest.tidyverse.org/articles/starwars")
```