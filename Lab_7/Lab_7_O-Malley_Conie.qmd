---
title: "Lab 7"
author: "Conie O'Malley"
date: "`r Sys.Date()`"
format: 
  pdf: 
    titlepage: true
    toc: true
    toc-depth: 2
    code-block-wrap: true
    number-sections: true
execute:
  echo: true
  freeze: false
  error: false
  jupyter: python3
python:
  version: /Users/coniecakes/anaconda3/envs/datascience/bin/python
---

# Lab Instructions

## Deliverable 1: Get your working directory and paste below:

```{r deliverable 1}
getwd()
```

## Deliverable 2: Load the Required libraries

``` {r deliverable 2}
# package installation and library
required_pagackage <- c("geojsonio", "ggmap", "highcharter", "leaflet", "plotly", "Rserve", "sf", 
                        "ggthemes", "DT", "gapminder", "devtools", "remotes", "dotenv")

for (i in required_pagackage) {
    if (!require(i, character.only = TRUE)) {
        renv::install(i)
    }
    library(i, character.only = TRUE)
}
```

# Part 1: Data Visualization Using ggplot2

## Deliverable 3: Get and Explore the Diamonds Dataset

```{r deliverable 3}
utils::data(diamonds)
utils::head(diamonds)
utils::tail(diamonds)
```

## Deliverable 4: Create a Histogram of “diamonds” in Base R

```{r deliverable 4}
graphics::hist(diamonds$carat, main = "Carat Histogram", xlab = "Carat")
```

## Deliverable 5: Ccreate a Scatterplot of “diamonds” using Base R

```{r deliverable 5}
graphics::plot(price ~ carat, data = diamonds, xlab = "Carat", ylab = "Price", 
              main = "Scatterplot of Carat vs Price")
graphics::plot(diamonds$carat, diamonds$price, xlab = "Carat", ylab = "Price", 
              main = "Scatterplot of Carat vs Price")
```

## Deliverable 6: Build a Boxplot of carat in the diamonds dataset

```{r deliverable 6}
graphics::boxplot(diamonds$carat, ylab = "Carat", main = "Boxplot of Diamonds by Carat")
```

## Deliverable 7: Create a Blank Canvas in ggplot

```{r deliverable 7}
ggplot()
```

## Deliverable 8: Rebuild the diamonds histogram with ggplot

```{r deliverable 8}
ggplot(data = diamonds) +
  ggthemes::theme_economist_white(base_size = 10) +
  geom_histogram(aes(x = carat)) +
  labs(x = "Carat", y = "Frequency", title = "Histogram of Carat")
```

## Deliverable 9: Build a Density Plot

```{r deliverable 9}
ggplot(data = diamonds) +
  geom_density(aes(x = carat),fill = "grey50") +
  labs(title = "Density plot of Carat", x = "Carat", y = "Density") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Deliverable 10: Build a Scatterplot with ggplot

```{r deliverable 10}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point() + 
  labs(title = "Scatterplot of Carat vs Price", x = "Carat", y = "Price") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Deliverable 11: Re-Build Your Scatterplot with Color

```{r deliverable 11}
g <- ggplot(diamonds, aes(x = carat, y = price))
g + geom_point()
g + geom_point(aes(color = color)) + 
  labs(title = "Color Scatterplot of Carat vs Price", 
      x = "Carat", 
      y = "Price") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Deliverable 12: Demonstrate a Facet Wrap Plot

```{r deliverable 12}
g + geom_point(aes(color = color)) + facet_wrap(~ color) + labs(x = "Carat", y = "Price")
```

## Deliverable 13: Demonstrate a Facet Wrap Grid Plot

```{r deliverable 13}
g + geom_point(aes(color = color)) + facet_grid(cut ~ color) + labs(x = "Carat", y = "Price")
```

## Deliverable 14: Demonste a Facet Wrap Plot with a Histogram

```{r deliverable 14}
ggplot(diamonds, aes(x = carat)) +
  geom_histogram() +
  facet_wrap(~ color) +
  labs(title = "Histogram of Carat by Color", x = "Carat", y = "Count") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Deliverable 15: Demonstrate Boxplots in ggplot

```{r deliverable 15}
ggplot(diamonds, aes(y = carat, x = 1)) +
  geom_boxplot() + 
  labs(title = "Boxplot of Carat", y = "Carat", x = NULL) +
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 15b}
ggplot(diamonds, aes(y = carat, x = cut)) +
  geom_boxplot() +
  labs(title = "Boxplot of Carat", y = "Carat", x = "Cut") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Deliverable 16: Demonstrate a Violinplot in ggplot

```{r deliverable 16}
ggplot(diamonds, aes(y = carat, x = cut)) +
  geom_violin() +
  labs(title = "Violin Plot of Carat", y = "Carat", x = "Cut") +
  theme(plot.title = element_text(hjust = 0.5))
```

# Part 2: Reading in External Data and Visualizing with ggplot2

## Deliverable 17: Read in a CSV file from the Web, Explore, and Summarize

```{r deliverable 17}
college <- readr::read_csv('http://672258.youcanlearnit.net/college.csv')
utils::head(college)
utils::tail(college)
class(college)
summary(college)
```

## Deliverable 18: Wrangle the Data and Re-Summarize

```{r deliverable 18}
college <- college %>%
  dplyr::mutate(state=as.factor(state), region=as.factor(region), highest_degree=as.factor(highest_degree))

summary(college)
```

## Deliverable 19: Create a Basic Scatterplot of the college Data

```{r deliverable 19}
ggplot(data=college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg)) +
  labs(title = "Scatterplot of College Tuition vs SAT Average", x="Tuition", y="SAT Average") +
  theme(plot.title = element_text(hjust = 0.5))
```

## Deliverable 20: Add Shape Control to Your Scatterplot

 ```{r deliverable 20}
ggplot(data=college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, shape=control)) +
  labs(title = "Scatterplot of College Tuition vs SAT Average by Control", x="Tuition", y="SAT Average") +
  theme(plot.title = element_text(hjust = 0.5))
 ```

 ## Deliverable 21: Add Color to Your Shape Control

 ```{r deliverable 21}
ggplot(data=college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, color=control)) +
  labs(title = "Scatterplot of College Tuition vs SAT Average by Control", x="Tuition", y="SAT Average") +
  theme(plot.title = element_text(hjust = 0.5))
 ```

 ## Deliverable 22: Add Size to Your AES and Interpret

 ```{r deliverable 22}
ggplot(data = college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads)) +
  labs(title = "Scatterplot of College Tuition vs SAT Average by Control", x="Tuition", y="SAT Average") +
  theme(plot.title = element_text(hjust = 0.5))
 ```

 #### Analysis:

 There appears to be an inverse relationship between SAT Score and Tuition. The concentration of larger bubbles in the top left corner (intersection of increased SAT Scores and decreased tuition) and the smaller bubbles concentrated in the lower right region (intersection of decreased SAT Scores and increased tuition) support this from visual analysis.

 ## Deliverable 23: Add Alpha (Opacity) to Your AES

 ```{r deliverable 23}
ggplot(data = college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads), alpha=1/2) +
  labs(title = "Scatterplot of College Tuition vs SAT Average by Control", 
        x="Tuition", 
        y="SAT Average") +
  theme(plot.title = element_text(hjust = 0.5))
 ``` 

 ## Deliverable 24: Add a Line Plot and Smooth

 ```{r deliverable 24}
ggplot(data = college) +
  geom_line(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads), alpha=1/2) +
  labs(title = "Scatterplot of College Tuition vs SAT Average by Control", 
        x="Tuition", 
        y="SAT Average") +
  theme(plot.title = element_text(hjust = 0.5)) 
 ```

 ```{r deliverable 24b}
ggplot(data = college) +
  geom_smooth(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads), alpha=1/2) +
  labs(title = "Line Chart of College Tuition vs SAT Average by Control", 
        x="Tuition", 
        y="SAT Average" +
  theme(plot.title = element_text(hjust = 0.5)) )
 ```

## Deliverable 25: Create a Bar Graph

```{r deliverable 25}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(), 
        plot.background = element_blank(),
        plot.title = element_text(hjust = 0.5)) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

## Deliverable 26: Change Colors on your Bar Graph

```{r deliverable 26}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
  plot.background = element_blank(),
  plot.title = element_text(hjust = 0.5)) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue")) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

## Deliverable 27: Add Legends and Titles to Your Bar Graphs

```{r deliverable 27}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
  plot.background = element_blank(), 
  plot.title = element_text(hjust = 0.5)) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", 
                    limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue"),
                   guide=guide_legend(title ="Institution Type")) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

```{r deliverable 27a}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
  plot.background = element_blank(),
  plot.title = element_text(hjust = 0.5)) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue"), 
                    guide=guide_legend(title ="Institution Type", nrow = 1)) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

```{r deliverable 27b}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
        plot.background = element_blank(),
        plot.title = element_text(hjust = 0.5)) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue"), 
                    guide=guide_legend(title ="Institution Type", 
                                        nrow = 1,
                                        label.position = "bottom")) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

```{r deliverable 27c}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
        plot.background = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.key.size = unit(2.5, "lines")) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue"), 
                    guide=guide_legend(title ="Institution Type", 
                                      nrow = 1,
                                      label.position = "bottom")) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

```{r deliverable 27d}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
        plot.background = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.position = "top") +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue"), 
                    guide=guide_legend(title ="Institution Type", 
                                        nrow = 1,
                                        label.position = "bottom")) +
  labs(title = "Bar Graph of Number of Schools by Region and Control Type")
```

## Deliverable 28: Add Annotations to Your Bar Graphs

```{r deliverable 28}
ggplot(data = college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads), alpha=1/2) +
  ggplot2::annotate("text", label="Elite Privates", x=45000, y=1450) +
  geom_hline(yintercept = mean(college$sat_avg)) +
  ggplot2::annotate("text", label="Mean SAT", x=47500, y=mean(college$sat_avg)-15) +
  geom_vline(xintercept = mean(college$tuition)) +
  ggplot2::annotate("text", label="Mean Tuition", y=700, x=mean(college$tuition)+7500) + 
  labs(title = "College Data: SAT Scores and Tuition by Control Type",
       subtitle = "Size of circle represents number of undergraduates",
       x = "Tution",
       y = "SAT Score") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```

```{r deliverable 28a}
ggplot(data = college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads), alpha=1/2) +
  ggplot2::annotate("text", label="Elite Privates", x=45000, y=1450) +
  geom_hline(yintercept = mean(college$sat_avg)) +
  ggplot2::annotate("text", label="Mean SAT", x=47500, y=mean(college$sat_avg)-15) +
  geom_vline(xintercept = mean(college$tuition)) +
  ggplot2::annotate("text", label="Mean Tuition", y=700, x=mean(college$tuition)+7500) + 
  labs(title = "College Data: SAT Scores and Tuition by Control Type",
       subtitle = "Size of circle represents number of undergraduates",
       x = "Tution",
       y = "SAT Score") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        panel.background = element_blank(), 
        legend.key = element_blank())
```

```{r deliverable 28b}
ggplot(data = college) +
  geom_point(mapping=aes(x=tuition, y=sat_avg, color=control, size=undergrads), alpha=1/2) +
  ggplot2::annotate("text", label="Elite Privates", x=45000, y=1450) +
  geom_hline(yintercept = mean(college$sat_avg)) +
  ggplot2::annotate("text", label="Mean SAT", x=47500, y=mean(college$sat_avg)-15) +
  geom_vline(xintercept = mean(college$tuition)) +
  ggplot2::annotate("text", label="Mean Tuition", y=700, x=mean(college$tuition)+7500) + 
  labs(title = "College Data: SAT Scores and Tuition by Control Type",
       subtitle = "Size of circle represents number of undergraduates",
       x = "Tution",
       y = "SAT Score") +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        panel.background = element_blank(), 
        legend.key = element_blank()) +
  scale_color_discrete(name="Institution Type") +
  scale_size_continuous(name="Undergraduate") 
```

```{r deliverable 28c}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme(panel.background = element_blank(),
        plot.background = element_blank(),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5)) +
  scale_x_discrete(name="Region") +
  scale_y_continuous(name = "Number of Schools", limits = c(0,500)) +
  scale_fill_manual(values = c("orange","blue"), 
                    guide=guide_legend(title ="Institution Type"), 
                          theme(legend.position = "bottom")) +
  ggtitle("More college are in the Southern USA than any other region.", subtitle = "Source: Collegeboard")
```

## Deliverable 29: Explore Pre-Defined Themes for Your Bar Graphs

```{r deliverable 29}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  labs(title = "College Type by Region", x = "Region", y = "Count") + 
  scale_fill_manual(values = c("pink","light blue"), 
                    guide=guide_legend(title ="Institution Type"))
```

```{r deliverable 29a}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_bw() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29b}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_minimal() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29c}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_void() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29d}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_dark() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29e}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_solarized() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29f}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_excel() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29g}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_wsj() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29h}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_economist() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29i}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_economist_white() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

```{r deliverable 29j}
ggplot(data = college) +
  geom_bar(mapping = aes(x=region, fill=control)) +
  theme_fivethirtyeight() +
  labs(title = "College Type by Region", x = "Region", y = "Count", fill = "Institution Type") + 
  theme(plot.title = element_text(hjust = 0.5))
```

# Part 3: Plotting Data Visualizations on Maps Using the Google API

```{r api key}
dotenv::load_dot_env()
google_api_key <- Sys.getenv("GOOGLE_MAPS_API_KEY")
register_google(key = google_api_key)
```

# Part 4: Interactive Data Visualizations

## Deliverable 30: Prepare the Data We Will Plot

```{r deliverable 30}
# Prepare the data for visualizations
job_data <- readr::read_csv("/Users/coniecakes/Library/CloudStorage/OneDrive-Personal/001. Documents - Main/023. Programming Tools/R Studio/AdvTxtAnalytics/Lab_7/data/job_data.csv")
utils::head(job_data, 10) # view created data
data_to_plot <- job_data %>%
  dplyr::group_by(Region, Year) 

# Load shapefiles for the choropleth map
esri_shapefile <- sf::read_sf("/Users/coniecakes/Library/CloudStorage/OneDrive-Personal/001. Documents - Main/023. Programming Tools/R Studio/AdvTxtAnalytics/Lab_7/data/world-shape-files")
geojson_shapefile <- sf::read_sf("/Users/coniecakes/Library/CloudStorage/OneDrive-Personal/001. Documents - Main/023. Programming Tools/R Studio/AdvTxtAnalytics/Lab_7/data/world-geojson.json")
shp_as_sf <- sf::read_sf("/Users/coniecakes/Library/CloudStorage/OneDrive-Personal/001. Documents - Main/023. Programming Tools/R Studio/AdvTxtAnalytics/Lab_7/data/world-shape-files")
converted_geojson <- geojsonio::geojson_list(shp_as_sf)
# Prepare data for the Gapminder-based choropleth
gapminder_most_recent <- gapminder %>%
  dplyr::filter(year == max(year))
```

## Deliverable 31: View Data in Highcharter

```{r deliverable 31}
library(highcharter)
# Define categories and series for highcharter
summary_data <- dplyr::summarize(
  dplyr::group_by(job_data, Year, Category), 
  Total = sum(Total, na.rm = TRUE)
)

# Define categories and series for highcharter
years <- unique(summary_data$Year)  # Categories for x-axis
categories <- unique(summary_data$Category)  # Series (subcategories)

# Initialize and configure the highchart
hc <- highcharter::highchart() %>%
  highcharter::hc_chart(type = "column") %>%
  highcharter::hc_title(text = "Job Data by Year and Category") %>%
  highcharter::hc_xAxis(categories = years) %>%
  highcharter::hc_yAxis(title = list(text = "Total")) %>%
  highcharter::hc_plotOptions(series = list(stacking = "normal"))

# Add a series for each job category
for (category in categories) {
  data_for_category <- summary_data %>%
    dplyr::filter(Category == category) %>%
    dplyr::arrange(Year) %>%
    dplyr::pull(Total)
  
  hc <- hc %>%
    highcharter::hc_add_series(
      name = category,
      data = data_for_category,
      stack = "category"
    )
}

# Display the chart
hc
```

## Deliverable 32: View Data in Plotly Stacked Bar Chart

```{r deliverable 32}
library(plotly)
# Group and summarize data
summary_data <- dplyr::summarize(
  dplyr::group_by(job_data, Country, `Job Title`), 
  Total = sum(Total, na.rm = TRUE)
)

# Unique job titles
job_titles <- unique(summary_data$`Job Title`)

# Initialize the plotly object
plot <- plotly::plot_ly()

for (job_title in job_titles) {
  # Correctly filtering based on the job title
  job_data <- dplyr::filter(summary_data, `Job Title` == job_title)
  
  plot <- plot %>%
    plotly::add_trace(
      type = 'bar',
      orientation = 'h',  # Horizontal bars
      name = job_title,
      y = job_data$Country,  # Countries on y-axis
      x = job_data$Total,  # Totals on x-axis
      text = job_data$`Job Title`,  # Text for bar labels
      textposition = 'auto',  # Automatically position text
      hovertemplate = paste('<b>Job Title:</b> %{text}<br>',
                            '<b>Total:</b> %{x}<extra></extra>')
    )
}

# Customize the layout
plot <- plot %>%
  plotly::layout(
    title = 'Job Totals by Job Title and Country',
    barmode = 'group',  # Grouped bar mode
    xaxis = list(title = 'Total'),
    yaxis = list(title = 'Country'),
    bargap = 0.2  # Gap between groups of bars
  )

# Display the chart
plot
```

## Deliverable 34: View Leaflet Map Plot

```{r deliverable 34}
# Summarize your data
library(leaflet)
summary_data <- dplyr::summarize(
  dplyr::group_by(job_data, Country, Latitude, Longitude),
  Total = sum(Total, na.rm = TRUE)
)

# Initialize the leaflet map
leaflet_map <- leaflet::leaflet(data = summary_data) %>%
  leaflet::addTiles() %>%  # Add default OpenStreetMap map tiles
  leaflet::addMarkers(
    ~Longitude, ~Latitude,
    popup = ~paste(
      "<b>Country:</b>", Country, "<br>",
      "<b>Total:</b>", Total
    )
  ) %>%
  leaflet::setView(
    lng = mean(summary_data$Longitude, na.rm = TRUE),
    lat = mean(summary_data$Latitude, na.rm = TRUE),
    zoom = 2
  )

# Display the map
leaflet_map
```

## Deliverable 35: iew a Leaflet Map with Circle Markers

```{r deliverable 35}
library(leaflet)
# Summarize your data
summary_data <- dplyr::summarize(
  dplyr::group_by(job_data, Country, Latitude, Longitude),
  Total = sum(Total, na.rm = TRUE)
)

# Initialize the leaflet map
leaflet_map2 <- leaflet::leaflet(data = summary_data) %>%
  leaflet::addTiles() %>%  # Add default OpenStreetMap map tiles
  leaflet::addCircleMarkers(
    ~Longitude, ~Latitude,
    radius = ~sqrt(Total),  # Optional: Use total to scale marker size
    color = 'blue',
    stroke = FALSE, fillOpacity = 0.5,
    popup = ~paste(
      "<b>Country:</b>", Country, "<br>",
      "<b>Total:</b>", Total
    )
  ) %>%
  leaflet::setView(
    lng = mean(summary_data$Longitude, na.rm = TRUE),
    lat = mean(summary_data$Latitude, na.rm = TRUE),
    zoom = 2
  )

# Display the map
leaflet_map2
```

## Deliverable 36: View Leafelet Map with Clustered Markers

```{r deliverable 36}
# Summarize your data
summary_data <- dplyr::summarize(
  dplyr::group_by(job_data, Country, Latitude, Longitude),
  Total = sum(Total, na.rm = TRUE)
)

# Initialize the leaflet map
leaflet_map3 <- leaflet::leaflet(data = summary_data) %>%
  leaflet::addTiles() %>%  # Add default OpenStreetMap map tiles
  leaflet::addMarkers(
    ~Longitude, ~Latitude,
    popup = ~paste(
      "<b>Country:</b>", Country, "<br>",
      "<b>Total:</b>", Total
    ),
    clusterOptions = leaflet::markerClusterOptions()
  ) %>%
  leaflet::setView(
    lng = mean(summary_data$Longitude, na.rm = TRUE),
    lat = mean(summary_data$Latitude, na.rm = TRUE),
    zoom = 2
  )

# Display the map
leaflet_map3
```

## Deliverable 37: Read in Shapefiles and View in Cloropleth Map

```{r deliverable 37}
# read in shape files
esri_shapefile <- sf::read_sf("/Users/coniecakes/Library/CloudStorage/OneDrive-Personal/001. Documents - Main/023. Programming Tools/R Studio/AdvTxtAnalytics/Lab_7/data/world-shape-files")
converted_geojson <- geojsonio::geojson_list(esri_shapefile)

# Create a summary job data
summary_data <- dplyr::summarize(
  dplyr::group_by(job_data, Country),
  Total = sum(Total, na.rm = TRUE)
)

# Merge the shapefile data with summary data
joined_data <- dplyr::left_join(esri_shapefile, summary_data, by = c("name_long" = "Country"))

# Define a color palette for the Total values
color_palette <- leaflet::colorNumeric(
  palette = "YlOrRd",  # A color palette for the map
  domain = joined_data$Total,
  na.color = "transparent"  # For regions with no data
)

# Create the map
leaflet_map4 <- leaflet::leaflet(joined_data) %>%
  leaflet::addTiles() %>%  # Add default map tiles
  leaflet::addPolygons(
    fillColor = ~color_palette(Total),
    weight = 1,
    opacity = 1,
    color = "white",  # Border color between polygons
    dashArray = "3",
    fillOpacity = 0.7,
    highlight = leaflet::highlightOptions(
      weight = 2,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste("<b>Country:</b> ", name_long, "<br>",
                   "<b>Total:</b> ", Total),
    labelOptions = leaflet::labelOptions(
      direction = "auto"
    )
  ) %>%
  leaflet::addLegend(
    pal = color_palette,
    values = ~Total,
    title = "Total by Country",
    position = "bottomright"
  )

# Display the map
leaflet_map4
```

# Part 5: Data Visualization in Python

## Deliverable 38: Prepare Your Python Environment for DataViz

```{python deliverable 38}
print("Hello, Python in Quarto")
```

```{python import libraries}
# Load necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from sklearn.datasets import load_iris
from nltk.corpus import inaugural
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
nltk.download('inaugural')
```

## Deliverable 39: Prepare and Plot Your First Graph

```{python data import 1}
tips = sns.load_dataset('tips')
print(tips.head())
```

```{python data prep 1}
#Calculate average tips by day
avg_tips = tips.groupby('day')['tip'].mean().reset_index()
```

```{python deliverable 39}
# plot average tips by day
plt.figure(figsize=(8, 6))
plt.bar(avg_tips['day'], avg_tips['tip'], color='skyblue')
plt.xlabel('Day of the Week')
plt.ylabel('Average Tip')
plt.title('Average Tip Amount by Day')
plt.show()
```

## Deliverable 40: Data Visualization in Seaborn

```{python deliverable 40}
plt.figure(figsize=(8, 6))
sns.boxplot(x='day', y='tip', data=tips)
plt.xlabel('Day of the Week')
plt.ylabel('Tip Amount')
plt.title('Distribution of Tips by Day')
plt.show()
```

## Deliverable 41: Adjusting and Customizing your Data Visualization

```{python deliverable 41}
sns.set_theme(style="whitegrid")
plt.figure(figsize=(8, 6))
sns.boxplot(x='day', y='tip', data=tips, palette='pastel')
plt.xlabel('Day of the Week')
plt.ylabel('Tip Amount')
plt.title('Customized Distribution of Tips by Day')
plt.show()
```

## Deliverable 42: Preparing to Visualize Text Data

```{python deliverable 42}
obama_speech = inaugural.raw('2009-Obama.txt')
# print the first 500 charachters
print(obama_speech[:500])
```

```{python deliverable 42a}
# Tokenize the speech
tokens = word_tokenize(obama_speech.lower())
# Remove punctuation and stop words
words = [word for word in tokens if word.isalpha()]
stop_words = set(stopwords.words('english'))
words = [word for word in words if not word in stop_words]
# Preview the first 20 words
print(words[:20])
```

## Deliverable 43: Visualizing Text Data

```{python deliverable 43}
# Calculate word frequency
word_freq = nltk.FreqDist(words)
# Select the top 10 most common words
most_common_words = word_freq.most_common(10)
# Convert to DataFrame for easier plotting
df = pd.DataFrame(most_common_words, columns=['Word', 'Frequency'])
# Plot
plt.figure(figsize=(10, 6))
plt.bar(df['Word'], df['Frequency'], color='lightblue')
plt.xlabel('Words')
plt.ylabel('Frequency')
plt.title('Top 10 Most Frequent Words in Obama\'s 2009 Inaugural Address')
plt.xticks(rotation=45)
plt.show()
```

# Part 6: Building Dashboards in Shiny

## Deliverable 44: Explore Shiny Examples

```{r deliverable 44}
library(shiny)
runExample("01_hello")
runExample("10_download")
```

## Deliverable 45: Creating a Basic RShiny App from Template

```{r deliverable 45}
print('Ran shiny app through console with `shiny::runApp("Lab_7/app.R")`')
```

## Deliverable 46: Creating a Basic PyShiny App from Template

```{r deliverable 46}
print('Ran shiny app through terminal with `shiny run --reload --port 8501 Lab_7/app.py`')
```